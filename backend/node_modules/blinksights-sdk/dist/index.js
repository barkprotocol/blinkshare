"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlinksightsClient = void 0;
const axios_1 = __importDefault(require("axios"));
const web3_js_1 = require("@solana/web3.js");
const constants_1 = require("./constants");
const crypto_1 = require("crypto");
class BlinksightsClient {
    /**
     * Create a new Blinksights client
     * @param apiKey The API key
     * @param baseUrl For testing, don't use it.
     */
    constructor(apiKey, baseUrl) {
        if (baseUrl) {
            this.axios = axios_1.default.create({
                baseURL: baseUrl,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                }
            });
        }
        else {
            this.axios = axios_1.default.create({
                baseURL: constants_1.API_URL,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                }
            });
        }
    }
    /**
     * Create an ActionGetResponse object
     * @param url The URL from the request
     * @param action The blink action object
     * @returns The blink action object with the links updated to include the action identifier
     */
    async createActionGetResponseV2(url, action) {
        try {
            const actionIdentifier = this.createActionIdentifier(url);
            const identityParam = `actionId=${actionIdentifier}`;
            console.log('actionIdentifier', actionIdentifier);
            await this.axios.post('/api/v2/track-render', {
                url: url,
                action: action,
                actionIdentifier: actionIdentifier
            });
            // Dynamically update links if they exist and are in the expected format
            if (action.links && action.links.actions.length > 0) {
                const updatedLinks = action.links.actions.map((link) => {
                    if (typeof link.href === 'string') {
                        const separator = link.href.includes('?') ? '&' : '?';
                        return {
                            ...link,
                            href: `${link.href}${separator}${identityParam}`
                        };
                    }
                    return link;
                });
                // Return a new action object with updated links
                return {
                    ...action,
                    links: { actions: updatedLinks }
                };
            }
            else {
                return action; // Return the action unchanged if no links to update
            }
        }
        catch (error) {
            console.error('Could not create action response, returning original action instead. Error: ' + error);
            return action; // Return the original action if an error occurs
        }
    }
    /**
     * Create an ActionGetResponse object
     * @param url The URL from the request
     * @param action The blink action object
     * @returns The blink action object with the links updated to include the action identifier
     */
    async createActionGetResponseV1(url, action) {
        try {
            const actionIdentifier = this.createActionIdentifier(url);
            const identityParam = `actionId=${actionIdentifier}`;
            await this.axios.post('/api/v2/track-render', {
                "url": url,
                "action": action,
                "actionIdentifier": actionIdentifier
            });
            if (action.links && action.links.actions.length > 0) {
                let links = action.links.actions.map((link) => {
                    const separator = link.href.includes('?') ? '&' : '?';
                    return {
                        ...link,
                        href: `${link.href}${separator}${identityParam}`,
                    };
                });
                const actionGetResponse = {
                    ...action,
                    links: { actions: links }
                };
                return actionGetResponse;
            }
            else {
                return action;
            }
        }
        catch (error) {
            console.error('Could not create action response, returning original action instead. Error: ' + error);
            return action;
        }
    }
    /**
     * !!! DEPRECATED - please use createActionGetResponseV1 instead !!!
     * Track a render event
     * @param url The URL of the blink being rendered
     * @param action The blink action object\
     */
    async trackRenderV1(url, action) {
        try {
            await this.axios.post('/api/v1/track-render', {
                "url": url,
                "action": action
            });
        }
        catch (error) {
            console.error('Could not track view. This method is deprecated, use createActionGetResponseV1. Error: ' + error);
        }
    }
    /**
     * !!! DEPRECATED - please use trackActionV2 instead !!!
     * Track an action event
     * @param headers The request headers
     * @param payerPubKey The payer's public key
     * @param requestUrl The request URL
     */
    async trackActionV1(headers, payerPubKey, requestUrl) {
        try {
            const referrer = headers.get('referer'); // Url of the originial blink
            await this.axios.post('/api/v1/track-action', {
                "payerPubKey": payerPubKey,
                "requestUrl": requestUrl,
                "blinkUrl": referrer
            });
        }
        catch (error) {
            console.error('Could not track interaction. This method is deprecated, use trackActionV2 instead. Error: ' + error);
        }
    }
    /**
     * Track an action event
     * @param headers The request headers
     * @param payerPubKey The payer's public key
     * @param requestUrl The request URL
     */
    async trackActionV2(payerPubKey, requestUrl) {
        try {
            await this.axios.post('/api/v2/track-action', {
                "payerPubKey": payerPubKey,
                "requestUrl": requestUrl,
            });
        }
        catch (error) {
            console.error('Could not track interaction, error: ' + error);
        }
    }
    /**
     * * * !!! DEPRECATED - please use getActionIdentityInstructionV2 instead !!!
     * Get the action identity instruction for tracking the transaction status.
     * @param url The URL of the blink
     * @returns TransactionInstruction
     */
    async getActionIdentityInstructionV1(headers, payerPubKey) {
        try {
            const identityKeypair = web3_js_1.Keypair.generate();
            const timestamp = Date.now();
            const memo = `BlinksightsAction|V1|${timestamp}`;
            const referrer = headers.get('referer'); // Url of the originial blink
            await this.axios.post('api/v1/track-transaction', {
                "memo": memo,
                "actionIdentityKey": identityKeypair.publicKey.toString(),
                "blinkUrl": referrer,
                "payerPubKey": payerPubKey
            });
            return new web3_js_1.TransactionInstruction({
                keys: [{ pubkey: new web3_js_1.PublicKey(payerPubKey), isSigner: true, isWritable: true }],
                data: Buffer.from(`BlinksightsAction|V1|${timestamp}`, "utf-8"),
                programId: new web3_js_1.PublicKey("MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr")
            });
        }
        catch (error) {
            console.error('Could not get action identity instruction. This method is deprecated, use getActionIdentityInstructionV2 instead. Error: ' + error);
        }
    }
    /**
     * !!! Experimental - This feature is still in alpha and does not work for all kind of blinks!!!
     * Get the action identity instruction for tracking the transaction status.
     * @param url The URL of the blink
     * @returns TransactionInstruction
     */
    async getActionIdentityInstructionV2(payerPubKey, requestUrl) {
        try {
            const timestamp = Date.now();
            const memo = `BlinksightsAction|V2|${timestamp}`;
            await this.axios.post('api/v2/track-transaction', {
                "memo": memo,
                "payerPubKey": payerPubKey,
                "requestUrl": requestUrl
            });
            const ix = new web3_js_1.TransactionInstruction({
                keys: [{ pubkey: new web3_js_1.PublicKey(payerPubKey), isSigner: true, isWritable: true }],
                data: Buffer.from(`BlinksightsAction|V2|${timestamp}`, "utf-8"),
                programId: new web3_js_1.PublicKey("MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr")
            });
            return ix;
        }
        catch (error) {
            console.error('Could not get action identity instruction. Error: ' + error);
        }
    }
    /**
        * !!! Experimental - This feature is still in alpha and does not work for all kind of blinks!!!
        * Create a blink id for the given url and orgId.
        * @param url
        * @param orgId
        * @returns blink id
        */
    createActionIdentifier(url) {
        return (0, crypto_1.createHash)('sha256').update(url).digest('hex');
    }
}
exports.BlinksightsClient = BlinksightsClient;
