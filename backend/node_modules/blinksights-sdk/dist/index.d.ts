import { ActionGetResponse } from '@solana/actions';
import { TransactionInstruction } from '@solana/web3.js';
export declare class BlinksightsClient {
    private axios;
    /**
     * Create a new Blinksights client
     * @param apiKey The API key
     * @param baseUrl For testing, don't use it.
     */
    constructor(apiKey: string, baseUrl?: string);
    /**
     * Create an ActionGetResponse object
     * @param url The URL from the request
     * @param action The blink action object
     * @returns The blink action object with the links updated to include the action identifier
     */
    createActionGetResponseV2(url: string, action: ActionGetResponse): Promise<any>;
    /**
     * Create an ActionGetResponse object
     * @param url The URL from the request
     * @param action The blink action object
     * @returns The blink action object with the links updated to include the action identifier
     */
    createActionGetResponseV1(url: string, action: ActionGetResponse): Promise<ActionGetResponse>;
    /**
     * !!! DEPRECATED - please use createActionGetResponseV1 instead !!!
     * Track a render event
     * @param url The URL of the blink being rendered
     * @param action The blink action object\
     */
    trackRenderV1(url: string, action: ActionGetResponse): Promise<void>;
    /**
     * !!! DEPRECATED - please use trackActionV2 instead !!!
     * Track an action event
     * @param headers The request headers
     * @param payerPubKey The payer's public key
     * @param requestUrl The request URL
     */
    trackActionV1(headers: Headers, payerPubKey: string, requestUrl: string): Promise<void>;
    /**
     * Track an action event
     * @param headers The request headers
     * @param payerPubKey The payer's public key
     * @param requestUrl The request URL
     */
    trackActionV2(payerPubKey: string, requestUrl: string): Promise<void>;
    /**
     * * * !!! DEPRECATED - please use getActionIdentityInstructionV2 instead !!!
     * Get the action identity instruction for tracking the transaction status.
     * @param url The URL of the blink
     * @returns TransactionInstruction
     */
    getActionIdentityInstructionV1(headers: Headers, payerPubKey: string): Promise<TransactionInstruction | undefined>;
    /**
     * !!! Experimental - This feature is still in alpha and does not work for all kind of blinks!!!
     * Get the action identity instruction for tracking the transaction status.
     * @param url The URL of the blink
     * @returns TransactionInstruction
     */
    getActionIdentityInstructionV2(payerPubKey: string, requestUrl: string): Promise<TransactionInstruction | undefined>;
    /**
        * !!! Experimental - This feature is still in alpha and does not work for all kind of blinks!!!
        * Create a blink id for the given url and orgId.
        * @param url
        * @param orgId
        * @returns blink id
        */
    private createActionIdentifier;
}
